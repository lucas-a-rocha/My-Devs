  METHODS:
      display_alv
        CHANGING
          ct_table TYPE ANY TABLE,

      columns_edit
        IMPORTING
          !it_table     TYPE ANY TABLE
          !io_columns   TYPE REF TO cl_salv_columns_table
          !iv_structure TYPE dd02l-tabname OPTIONAL
        RAISING
          cx_salv_data_error,

      generate_fieldcat
        IMPORTING
          !it_table          TYPE ANY TABLE
        RETURNING
          VALUE(rt_fieldcat) TYPE lvc_t_fcat,

      generate_fieldcat_struct
        IMPORTING
          !iv_structure      TYPE dd02l-tabname
        RETURNING
          VALUE(rt_fieldcat) TYPE lvc_t_fcat,

      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING
          !e_salv_function,

      on_link_click FOR EVENT link_click OF cl_salv_events_table
        IMPORTING row column.

  METHOD display_alv .

    TRY .
        cl_salv_table=>factory(
        IMPORTING
          r_salv_table = DATA(lo_salv_table)
        CHANGING
          t_table      = ct_table ).
      CATCH cx_salv_msg.
        RETURN.
    ENDTRY.

    IF lo_salv_table IS BOUND.

*     " Insert or remove all functions from ALV
      DATA(lo_function) = lo_salv_table->get_functions( ).
*      lo_function->set_all( abap_true ).

*      lo_salv_table->set_screen_status(
*        EXPORTING
*          report = sy-cprog
*          pfstatus = 'STATUS' "Copy SALV_DEMO_TABLE_FUNCTIONS - SALV_STANDARD
*          set_functions = o_alv->c_functions_all ).

      DATA(lo_selections) = lo_salv_table->get_selections( ).
      lo_selections->set_selection_mode( if_salv_c_selection_mode=>multiple ).

      DATA(lo_columns) = lo_salv_table->get_columns( ).
      lo_columns->set_optimize( abap_true ).

      TRY .

          me->columns_edit( it_table = ct_table io_columns = lo_columns ).

        CATCH cx_salv_not_found .
        CATCH cx_salv_data_error .
      ENDTRY.

      DATA(lo_events) = lo_salv_table->get_event( ).
*      SET HANDLER me->on_user_command FOR lo_events.
*      SET HANDLER me->on_link_click FOR lo_events.

      DATA(lo_display) = lo_salv_table->get_display_settings( ).
      lo_display->set_striped_pattern( abap_true ).
      lo_display->set_list_header( sy-title ).

      lo_salv_table->display( ).
    ENDIF.

  ENDMETHOD . " DISPLAY_ALV

  METHOD columns_edit.

    IF iv_structure IS NOT INITIAL.
      DATA(lt_fieldcat) = me->generate_fieldcat_struct( iv_structure = iv_structure ).
    ELSE.
      lt_fieldcat = me->generate_fieldcat( it_table = it_table ).
    ENDIF.

    DATA(lt_columns) = io_columns->get( ).
    DATA lo_column_table TYPE REF TO cl_salv_column_table.

    LOOP AT lt_columns ASSIGNING FIELD-SYMBOL(<fs_columns>).
      lo_column_table ?= <fs_columns>-r_column.

      READ TABLE lt_fieldcat WITH KEY fieldname = <fs_columns>-columnname INTO DATA(lw_fieldcat).
      IF sy-subrc EQ 0.
        lo_column_table->set_short_text(  value = lw_fieldcat-scrtext_s ).
        lo_column_table->set_medium_text( value = lw_fieldcat-scrtext_m ).
        lo_column_table->set_long_text(   value = lw_fieldcat-scrtext_l ).
        lo_column_table->set_tooltip(     value = lw_fieldcat-tooltip ).
      ELSE.
        lo_column_table->set_technical( if_salv_c_bool_sap=>true ).
      ENDIF.

    ENDLOOP.
  ENDMETHOD. " COLUMNS_EDIT

  METHOD generate_fieldcat.
    DATA ls_fieldcat TYPE lvc_s_fcat.
    DEFINE dfcat_texto.

      ls_fieldcat = CORRESPONDING #( &1 ).

      ls_fieldcat-tooltip   = &4.
      ls_fieldcat-coltext   = &3.

      ls_fieldcat-scrtext_l = &4. " 40
      ls_fieldcat-scrtext_m = &3. " 20
      ls_fieldcat-scrtext_s = &2. " 10
      ls_fieldcat-outputlen = &5.

      &1 = CORRESPONDING #( ls_fieldcat ).

    END-OF-DEFINITION.

    DATA:
      lo_data TYPE REF TO data.

    CREATE DATA lo_data LIKE LINE OF it_table.
    DATA(lo_tabdescr) = CAST cl_abap_structdescr( cl_abap_structdescr=>describe_by_data_ref( lo_data ) ).
    DATA(lt_dfies) = cl_salv_data_descr=>read_structdescr( lo_tabdescr ).

    rt_fieldcat = CORRESPONDING #( lt_dfies ).

    CALL FUNCTION 'LVC_FIELDCAT_COMPLETE'
      CHANGING
        ct_fieldcat = rt_fieldcat.

    LOOP AT rt_fieldcat ASSIGNING FIELD-SYMBOL(<fl_fcat>).
      DATA(lv_tabix) = sy-tabix.

      CASE <fl_fcat>-fieldname.
        WHEN 'MANDT' .
          DELETE rt_fieldcat INDEX lv_tabix.
*        WHEN 'FDGRV_OLD'.
*          dfcat_texto <fl_fcat> 'OldPlanGrp' 'Old Planning Group' 'Old Planning Group' 10.

      ENDCASE.

    ENDLOOP.

  ENDMETHOD. " GENERATE_FIELDCAT

  METHOD generate_fieldcat_struct.
    DATA ls_fieldcat TYPE lvc_s_fcat.
    DEFINE dfcat_texto.

      ls_fieldcat = CORRESPONDING #( &1 ).

      ls_fieldcat-tooltip   = &4.
      ls_fieldcat-coltext   = &3.

      ls_fieldcat-scrtext_l = &4. " 40
      ls_fieldcat-scrtext_m = &3. " 20
      ls_fieldcat-scrtext_s = &2. " 10
      ls_fieldcat-outputlen = &5.

      &1 = CORRESPONDING #( ls_fieldcat ).

    END-OF-DEFINITION.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name = iv_structure
      CHANGING
        ct_fieldcat      = rt_fieldcat.

    LOOP AT rt_fieldcat ASSIGNING FIELD-SYMBOL(<fs_fieldcat>).
      DATA(lv_tabix) = sy-tabix.

      CASE <fs_fieldcat>-fieldname.
        WHEN 'MANDT'.
          DELETE rt_fieldcat INDEX lv_tabix.
*        WHEN ''.
*          dfcat_texto <fs_fieldcat> '' '' '' <fs_fieldcat>-outputlen.
*          <fs_fieldcat>-edit = abap_true.
*        WHEN ''.
*          <fs_fieldcat>-key         = abap_true.
*          <fs_fieldcat>-fix_column  = abap_true.
*        WHEN ''.
*          <fs_fieldcat>-outputlen   = 10.
*          <fs_fieldcat>-checktable  = '!'.
*          <fs_fieldcat>-edit        = abap_true.
        WHEN OTHERS.

          CONTINUE.

      ENDCASE.
    ENDLOOP.

    SORT rt_fieldcat BY col_pos.

  ENDMETHOD. " GENERATE_FIELDCAT_STRUCT

  METHOD on_user_command.
    CASE sy-ucomm.
      WHEN '&CREATE'.
      WHEN '&SIMULATE'.
    ENDCASE.
  ENDMETHOD. " ON_USER_COMMAND

  METHOD on_link_click.
  ENDMETHOD. "ON_LINK_CLICK
